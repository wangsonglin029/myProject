<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon May 06 15:20:10 2024
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; GetTemperatureParameters &rArr; t_switch &rArr; Rt2Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b]">AWK_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">AWK_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC_IRQHandler</a> from test_adc.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[1b]">AWK_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[1e]">CLKTRIM_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[a]">FLASH_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[6]">GPIOA_IRQHandler</a> from test_exti.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[7]">GPIOB_IRQHandler</a> from test_exti.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[8]">GPIOC_IRQHandler</a> from test_exti.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[9]">GPIOD_IRQHandler</a> from test_exti.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ac1003_it.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[f]">I2C_IRQHandler</a> from test_i2c_master.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[22]">I2C_Master_Receive</a> from test_i2c_master.o(.text) referenced from main.o(.text)
 <LI><a href="#[23]">I2C_Master_Transmit</a> from test_i2c_master.o(.text) referenced from main.o(.text)
 <LI><a href="#[17]">IWDG_IRQHandler</a> from test_iwdt .o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[12]">LPTIM_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[d]">LPUART_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[19]">LVD_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ac1003_it.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[1c]">ONEWIRE_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[15]">PCA_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from ac1003_it.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[e]">SPI_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from ac1003_it.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from ac1003_it.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_ac1003.o(.text) referenced from startup_ac1003.o(.text)
 <LI><a href="#[10]">TIM10_IRQHandler</a> from test_basetime.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[11]">TIM11_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[13]">TIM1_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[14]">TIM2_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[b]">UART0_IRQHandler</a> from test_uart.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[c]">UART1_IRQHandler</a> from test_uart.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[1a]">VC_IRQHandler</a> from startup_ac1003.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from test_wwdt.o(.text) referenced from startup_ac1003.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ac1003.o(.text)
 <LI><a href="#[24]">fputc</a> from test_uart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1f]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[25]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ff]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[10e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[10f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[110]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[111]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, system_ac1003.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>AWK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CLKTRIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ONEWIRE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PCA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>VC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac1003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ac1003_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[b5]"></a>ADC_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ac1003_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Mode_Config
</UL>

<P><STRONG><a name="[112]"></a>ADC_StructInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>ADC_CommonInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ac1003_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Mode_Config
</UL>

<P><STRONG><a name="[113]"></a>ADC_CommonStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Mode_Config
</UL>

<P><STRONG><a name="[114]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ac1003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcForTemperature
</UL>

<P><STRONG><a name="[be]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcForTemperature
</UL>

<P><STRONG><a name="[115]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>ADC_ContinuousConverChannelCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>ADC_ContinuousConverRstCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>ADC_DisContinuousModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcForTemperature
</UL>

<P><STRONG><a name="[119]"></a>ADC_GetChannelConversionValue</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>ADC_SetCompareHtValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>ADC_SetCompareLtValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>ADC_CompareControlCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>ADC_ITCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Mode_Config
</UL>

<P><STRONG><a name="[11e]"></a>ADC_AccCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>ADC_AccResultClear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>ADC_GetAccResult</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>ADC_GetRISFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_adc.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>ADC_GetMISFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>ADC_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ac1003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[2b]"></a>delay_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac1003_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ac1003_delay.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>delay_xms</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ac1003_delay.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[2d]"></a>delay_ms</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ac1003_delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ac1003_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[32]"></a>FLASH_OPERATION_Unlock</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[33]"></a>FLASH_OPERATION_Lock</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[30]"></a>FLASH_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2f]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SWDP_Config
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[31]"></a>FLASH_EraseSector</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Lock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[34]"></a>FLASH_EraseAllSectors</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Lock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Unlock
</UL>

<P><STRONG><a name="[35]"></a>FLASH_ProgramWord</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Lock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[36]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Lock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Unlock
</UL>

<P><STRONG><a name="[37]"></a>FLASH_ProgramByte</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Lock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OPERATION_Unlock
</UL>

<P><STRONG><a name="[38]"></a>FLASH_SWDP_Config</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[123]"></a>FLASH_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ac1003_flash.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_flash.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>FLASH_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ac1003_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
</UL>

<P><STRONG><a name="[39]"></a>GPIO_DeInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ac1003_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[125]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ac1003_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Config
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[126]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEcuEnter
</UL>

<P><STRONG><a name="[127]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>GPIO_DBSyncCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>GPIO_DBPinSyncCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>GPIO_DBClkCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>GPIO_SetDBClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHighBit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVProStatus
</UL>

<P><STRONG><a name="[af]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHighBit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVProStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[12e]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>GPIO_PinPuPdCmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>GPIO_PortDRCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ac1003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ac1003_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Config
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Mode_Config
</UL>

<P><STRONG><a name="[3a]"></a>I2C_DeInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ac1003_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[3b]"></a>I2C_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ac1003_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Init &rArr; RCC_GetPCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLKFreq
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
</UL>

<P><STRONG><a name="[133]"></a>I2C_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_i2c.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>I2C_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
</UL>

<P><STRONG><a name="[88]"></a>I2C_MasterSendCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ac1003_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_SendByte
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Transmit
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Receive
</UL>

<P><STRONG><a name="[8c]"></a>I2C_GenerateSTART</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterRecive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterSend
</UL>

<P><STRONG><a name="[8e]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterRecive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterSend
</UL>

<P><STRONG><a name="[8d]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterRecive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterSend
</UL>

<P><STRONG><a name="[134]"></a>I2C_OwnAddressConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_i2c.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterRecive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterSend
</UL>

<P><STRONG><a name="[90]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterRecive
</UL>

<P><STRONG><a name="[135]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_i2c.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>I2C_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ac1003_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ac1003_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ac1003_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[3e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ac1003_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[3f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ac1003_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ac1003_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ac1003_it.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ac1003_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac1003_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_iwdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_IRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[cf]"></a>IWDG_SetReload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_iwdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[cd]"></a>IWDG_SetWdtMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_iwdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[138]"></a>IWDG_GetReload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_iwdt.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>IWDG_ReloadCR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_iwdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[d0]"></a>IWDG_Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_iwdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[139]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_iwdt.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>IWDG_WdtITShieldCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_iwdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[d3]"></a>IWDG_WdtITClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_iwdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>RCC_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>RCC_HIRCTrim</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ac1003_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_HIRCTrim
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>RCC_LIRCTrim</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>RCC_SetHXTDrive</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>RCC_SetLXTDrive</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>RCC_WaitForHIRCStable</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ac1003_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHIRCStable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>RCC_WaitForHXTStable</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>RCC_WaitForLIRCStable</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>RCC_WaitForLXTStable</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>RCC_LXTCmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>RCC_SetX32KPort</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>RCC_SetM0IRQLatency</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>RCC_SystemTickTimerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>RCC_SetSystemTickTimerCoreRefClockcmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>RCC_SysclkCmd</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ac1003_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_SysclkCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>RCC_SelSysClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>RCC_SysclkOutputConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>RCC_SysclkOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>RCC_SysclkFclkDiv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>RCC_GetSysclkSource</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>RCC_SetHclkDiv</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ac1003_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[41]"></a>RCC_SetPclkDiv</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ac1003_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>RCC_APBPeriphClockCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>RCC_PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_DeInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[14b]"></a>RCC_RTCResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>RCC_ResetCmd</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ac1003_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_ResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>

<P><STRONG><a name="[14c]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>RCC_SetIoMux</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>RCC_GetPCLKFreq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ac1003_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetPCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[42]"></a>TIM_DeInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ac1003_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[c0]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ac1003_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[14f]"></a>TIM_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>TIM_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[150]"></a>TIM_TogCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[151]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>TIM_SelectGatePolarity</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>TIM_GetPrescaler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>TIM_SetTimerLoadRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[155]"></a>TIM_GetTimerLoadRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>TIM_SetCountRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>TIM_GetCountRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>TIM_GetITSourceFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>TIM_GetITShieldFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_timer.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>TIM_ClearITFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ac1003_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>UART_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ac1003_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[44]"></a>UART_Init</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, ac1003_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_Init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Config
</UL>

<P><STRONG><a name="[15a]"></a>UART_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>UART_Cmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ac1003_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Config
</UL>

<P><STRONG><a name="[7f]"></a>UART_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac1003_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Config
</UL>

<P><STRONG><a name="[15b]"></a>UART_SetAddress</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>UART_ReciveCmd</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
</UL>

<P><STRONG><a name="[86]"></a>UART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[15d]"></a>UART_TB8Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>UART_RB8Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>UART_IrDAConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>UART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>UART_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>UART_ClearITBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>UART_SendData_WithParity</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>UART_ReceiveData_WithParity</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, ac1003_uart.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>WWDG_DeInit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ac1003_wwdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[d5]"></a>WWDG_SetPrescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_wwdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Config
</UL>

<P><STRONG><a name="[d6]"></a>WWDG_SetWindowValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ac1003_wwdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Config
</UL>

<P><STRONG><a name="[d8]"></a>WWDG_ITCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_wwdt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Config
</UL>

<P><STRONG><a name="[da]"></a>WWDG_SetRldCnt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac1003_wwdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Feed
</UL>

<P><STRONG><a name="[165]"></a>WWDG_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac1003_wwdt.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>WWDG_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac1003_wwdt.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>WWDG_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac1003_wwdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Config
</UL>

<P><STRONG><a name="[167]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>NVIC_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_NVIC_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Config
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Config
</UL>

<P><STRONG><a name="[168]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[51]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 462 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = main &rArr; GetTemperatureParameters &rArr; t_switch &rArr; Rt2Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAhIntegral
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePackStatus
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOut
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemDataInitByReadFlash
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanFliterInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSendAllowedStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordProtectedStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosTempProtectedCheck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mos
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Test
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSendAllowed
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEcuEnter
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargeStatus
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureParameters
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPackProtectedStatus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuTemperature
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLimitedSingleVoltage
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentParameters
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetConfStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCellStatus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSingleVoltage
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentKalmanFliterInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrStatusRegister
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNowSOH
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceManage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjSocByStaticVoltage
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Mode_Config
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APBPeriphClockCmd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysclkCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHIRCStable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HIRCTrim
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[75]"></a>SystemReset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemReset &rArr; RCC_ResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>GetStandardTime</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetStandardTime &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordProtectedStatus
</UL>

<P><STRONG><a name="[52]"></a>UART1_Config</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, test_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UART1_Config &rArr; UART_Init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>UART0_Config</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, test_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[82]"></a>Uart_SendByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, test_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendString
</UL>

<P><STRONG><a name="[84]"></a>Uart_SendString</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, test_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
</UL>

<P><STRONG><a name="[24]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, test_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[85]"></a>fgetc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, test_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>

<P><STRONG><a name="[c]"></a>UART1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, test_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UART0_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, test_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_i2c_master.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>I2C_Master_Init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, test_i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_Master_Init &rArr; I2C_Init &rArr; RCC_GetPCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>I2C_Master_Receive</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, test_i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Master_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>I2C_Master_SendByte</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, test_i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendCmd
</UL>

<P><STRONG><a name="[23]"></a>I2C_Master_Transmit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, test_i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Master_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>I2C_IRQHandler_MasterSend</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, test_i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IRQHandler_MasterSend
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>I2C_IRQHandler_MasterRecive</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, test_i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IRQHandler_MasterRecive
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[f]"></a>I2C_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, test_i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IRQHandler &rArr; I2C_IRQHandler_MasterRecive
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterRecive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler_MasterSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>GetNowSOH</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNowSOC
</UL>

<P><STRONG><a name="[91]"></a>GetNowSOC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNowSOH
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[72]"></a>IsChargeStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROMCheck
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjSocByStaticVoltage
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>OnePercentCap</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OnePercentCap &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnBalStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNowSOH
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargeStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAhIntegral
</UL>

<P><STRONG><a name="[9b]"></a>RecordCycleTimes</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocAdjustByVoltage
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNowSOH
</UL>

<P><STRONG><a name="[9a]"></a>SocAdjustByVoltage</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordCycleTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAhIntegral
</UL>

<P><STRONG><a name="[9c]"></a>SocKalmanManage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SocKalmanManage &rArr; SocKalmanFliter &rArr; KalmanFliter &rArr; kalman_filter_update &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanFliter
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAhIntegral
</UL>

<P><STRONG><a name="[63]"></a>mAhIntegral</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mAhIntegral &rArr; OnePercentCap &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanManage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocAdjustByVoltage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>SocDecayDueToTemperature</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SocDecayDueToTemperature &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNowSOH
</UL>

<P><STRONG><a name="[60]"></a>CalNowSOH</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CalNowSOH &rArr; SocDecayDueToTemperature &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocDecayDueToTemperature
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordCycleTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>WriteEEPROMCheck</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargeStatus
</UL>

<P><STRONG><a name="[56]"></a>SystemDataInitByReadFlash</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemDataInitByReadFlash &rArr; ReadFromFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>AdjSocByStaticVoltage</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AdjSocByStaticVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositiveRvalue
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNegativeRvalue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanFliterInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>UpdatePackStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>Send</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Send &rArr; SendHandle &rArr; TimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>PRINT</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PRINT &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>kalman_filter_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanFliterInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentKalmanFliterInit
</UL>

<P><STRONG><a name="[a9]"></a>kalman_filter_predict</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kalman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = kalman_filter_predict &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
</UL>

<P><STRONG><a name="[aa]"></a>kalman_filter_update</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, kalman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = kalman_filter_update &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
</UL>

<P><STRONG><a name="[16b]"></a>kalman_filter_x_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kalman.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>KalmanFliter</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, kalman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = KalmanFliter &rArr; kalman_filter_update &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_predict
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentKalmanFliter
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanFliter
</UL>

<P><STRONG><a name="[59]"></a>CurrentKalmanFliterInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>SocKalmanFliterInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Test
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjSocByStaticVoltage
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>CurrentKalmanFliter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CurrentKalmanFliter &rArr; KalmanFliter &rArr; kalman_filter_update &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
</UL>

<P><STRONG><a name="[9e]"></a>SocKalmanFliter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SocKalmanFliter &rArr; KalmanFliter &rArr; kalman_filter_update &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanManage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Test
</UL>

<P><STRONG><a name="[a6]"></a>GetPositiveRvalue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjSocByStaticVoltage
</UL>

<P><STRONG><a name="[a7]"></a>GetNegativeRvalue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjSocByStaticVoltage
</UL>

<P><STRONG><a name="[5c]"></a>Kalman_Test</STRONG> (Thumb, 52 bytes, Stack size 120 bytes, kalman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Kalman_Test &rArr; SocKalmanFliter &rArr; KalmanFliter &rArr; kalman_filter_update &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanFliter
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanFliterInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>GPIO_Config</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>IsEcuEnter</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsEcuEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>SetVProStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[b3]"></a>SendHighBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendHighBit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHandle
</UL>

<P><STRONG><a name="[a8]"></a>SendHandle</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, sf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendHandle &rArr; TimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHighBit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[5d]"></a>IsSendAllowed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>SetSendAllowedStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>ADC_Mode_Config</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, test_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_Mode_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>ADC_NVIC_Config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, test_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[18]"></a>ADC_IRQHandler</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, test_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetMISFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>AdcForTemperature</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, test_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AdcForTemperature
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSoftwareStartConvStatus
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuTemperature
</UL>

<P><STRONG><a name="[55]"></a>BASIC_TIM_Mode_Config</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, test_basetime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BASIC_TIM_Mode_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetTimerLoadRegister
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>TIM10_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, test_basetime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, test_basetime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOut
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStandardTime
</UL>

<P><STRONG><a name="[c5]"></a>SetTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, test_basetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>

<P><STRONG><a name="[57]"></a>EXTI_Key_Config</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, test_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EXTI_Key_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>GPIOD_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, test_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>Enter_DeepSleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test_exti.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_flash.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>WriteToFlash</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, test_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEPROMCheck
</UL>

<P><STRONG><a name="[a5]"></a>ReadFromFlash</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, test_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemDataInitByReadFlash
</UL>

<P><STRONG><a name="[ca]"></a>GetMcuUid</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, test_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[cb]"></a>IWDG_Config</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, test_iwdt .o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WdtITShieldCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetWdtMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[d1]"></a>IWDG_Feed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, test_iwdt .o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCR
</UL>

<P><STRONG><a name="[17]"></a>IWDG_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, test_iwdt .o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IWDG_IRQHandler &rArr; SystemReset &rArr; RCC_ResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WdtITClear
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>WWDG_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, test_wwdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_ClearFlag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_ITCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetWindowValue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetPrescaler
</UL>

<P><STRONG><a name="[d9]"></a>WWDG_Feed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, test_wwdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetRldCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, test_wwdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WWDG_IRQHandler &rArr; WWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_ClearFlag
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac1003.o(RESET)
</UL>
<P><STRONG><a name="[16e]"></a>Assert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sh367309.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>crc8</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataAllRight
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegister
</UL>

<P><STRONG><a name="[db]"></a>SetRegister</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetRegister &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mos
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrStatusRegister
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceManage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableExternalBalance
</UL>

<P><STRONG><a name="[67]"></a>Mos</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Mos &rArr; SetRegister &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>Rt2Temperature</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Rt2Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuTemperature
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_switch
</UL>

<P><STRONG><a name="[64]"></a>GetMcuTemperature</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GetMcuTemperature &rArr; Rt2Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcForTemperature
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rt2Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>MosTempProtectedCheck</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MosTempProtectedCheck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>SetEnBalStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sh367309.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>GetEnBalStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sh367309.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
</UL>

<P><STRONG><a name="[71]"></a>BalanceManage</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BalanceManage &rArr; SetRegister &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>EnableExternalBalance</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sh367309.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegister
</UL>

<P><STRONG><a name="[e3]"></a>GetTemperatureRref</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetTemperatureRref &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureParameters
</UL>

<P><STRONG><a name="[e6]"></a>v_switch</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = v_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSingleVoltage
</UL>

<P><STRONG><a name="[e5]"></a>Endian2Bytes</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Endian2Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureParameters
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentParameters
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSingleVoltage
</UL>

<P><STRONG><a name="[e4]"></a>IsDataAllRight</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IsDataAllRight &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentParameters
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSingleVoltage
</UL>

<P><STRONG><a name="[6d]"></a>GetAllSingleVoltage</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GetAllSingleVoltage &rArr; IsDataAllRight &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataAllRight
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endian2Bytes
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>c0_switch</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = c0_switch &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentKalmanFliter
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentParameters
</UL>

<P><STRONG><a name="[62]"></a>GetCurrentParameters</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetCurrentParameters &rArr; c0_switch &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataAllRight
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endian2Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>t_switch</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = t_switch &rArr; Rt2Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rt2Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureParameters
</UL>

<P><STRONG><a name="[65]"></a>GetTemperatureParameters</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GetTemperatureParameters &rArr; t_switch &rArr; Rt2Temperature &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_switch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endian2Bytes
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureRref
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>GetCellStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCellStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>GetConfStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetConfStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>ClrStatusRegister</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ClrStatusRegister &rArr; SetRegister &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>c1_switch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sh367309.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[f0]"></a>DescendingOrderSort</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DescendingOrderSort
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLimitedSingleVoltage
</UL>

<P><STRONG><a name="[6e]"></a>GetLimitedSingleVoltage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetLimitedSingleVoltage &rArr; DescendingOrderSort
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DescendingOrderSort
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>GetPackProtectedStatus</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetPackProtectedStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>RecordProtectedStatus</STRONG> (Thumb, 710 bytes, Stack size 64 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RecordProtectedStatus &rArr; GetStandardTime &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStandardTime
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>TimeOut</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sh367309.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHandle
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>AnalysisAndPrintErrCode</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, sh367309.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLKFreq
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNowSOC
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLimitedSingleVoltage
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetPclkDiv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetHclkDiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuTemperature
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c1_switch
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStandardTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTick
</UL>

<P><STRONG><a name="[172]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>localtime</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStandardTime
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceManage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegister
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuUid
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordProtectedStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Test
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllSingleVoltage
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStandardTime
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_predict
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocDecayDueToTemperature
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNowSOH
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rt2Temperature
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rt2Temperature
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_update
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_predict
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocDecayDueToTemperature
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNowSOH
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_switch
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rt2Temperature
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_update
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocDecayDueToTemperature
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNowSOH
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_switch
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rt2Temperature
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureRref
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureRref
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuTemperature
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_switch
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocDecayDueToTemperature
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanManage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Test
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNowSOH
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureRref
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuTemperature
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocKalmanManage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Test
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNowSOH
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c0_switch
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_switch
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_switch
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rt2Temperature
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnePercentCap
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureRref
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rt2Temperature
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[178]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[179]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[17a]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[f7]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[fb]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[fa]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[105]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[17c]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[26]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[5b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToFlash
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MosTempProtectedCheck
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceManage
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisAndPrintErrCode
</UL>

<P><STRONG><a name="[17f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[180]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[fc]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b4]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sf.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHandle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisAndPrintErrCode
</UL>

<P><STRONG><a name="[102]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[103]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[104]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[106]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[181]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[182]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[183]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[df]"></a>log</STRONG> (Thumb, 790 bytes, Stack size 80 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rt2Temperature
</UL>

<P><STRONG><a name="[ed]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_switch
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c8]"></a>GPIO_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, test_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_IRQHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_IRQHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[101]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[109]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[108]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
